In order to build DArcomage for 64-bit Windows, you need to download these 
prerequisites:

* Windows SDK (Any that works on your system should do, I used the Windows SDK 
for Windows 7, but they are all largely backwards-compatible anyway; 
http://msdn.microsoft.com/en-us/windows/desktop/ff851942.aspx)
* Associated .NET Framework (for Windows 7 SDK it's 4.0, get it from Windows 
Update)
* Git for Windows (http://msysgit.github.io/)
* CMake (http://www.cmake.org/download/)
* Lua 5.1 development files 
(http://sourceforge.net/projects/luabinaries/files/5.1.5/Windows%20Libraries/Dynamic/
or http://sourceforge.net/projects/luabinaries/files/ to look for a newer 
version; you need to download the dynamic library that matches the Windows SDK 
and for Win64, in case of the Windows 7 SDK it's lua-5.1.5_Win64_dll10_lib.zip)
* SDL 2 development files (the -VC version, here and in the other SDL parts: 
http://www.libsdl.org/download-2.0.php)
* SDL_image 2 development files (https://www.libsdl.org/projects/SDL_image/)
* SDL_mixer 2 development files (http://www.libsdl.org/projects/SDL_mixer/)
* SDL_ttf 2 development files (https://www.libsdl.org/projects/SDL_ttf/)
* DMD 2 installer (don't mind the fact it says "i386": http://dlang.org/download.html
Note that IE7 or lower does not work, use IE8 or another browser)

First install Git for Windows (use defaults). Start Git Bash, cd into a folder 
you want to place the development files, then download darcomage and libarcomage 
by running:

git clone https://github.com/GreatEmerald/libarcomage.git
cd libarcomage
git submodule update --init
cd ..
git clone https://github.com/GreatEmerald/darcomage.git
cd darcomage
git submodule update --init

Then install the Windows SDK (make sure to have installed appropriate .NET 
Framework version from Windows Update first). During installation make sure you 
have the options "Visual C++ Compilers" and "x64 Libraries" selected (everything 
else is optional, although "x86 Libraries" can be handy for also making a 32-bit 
build). This will give the needed linker, NMake and OpenGL libraries.

Then install DMD (very important to install it *after* the Windows SDK, because 
the installer detects it; if you installed it before, reinstall). During 
installation you can optionally enable DMC (not needed for 64-bit builds, but 
needed for 32-bit ones). This will give the D compiler.

Then install CMake. It's the tool that generates calls to the compiler and 
linker.

Then extract all the development files somewhere. It's easier if the absolute 
paths to each of them is shorter.

To build it, it's very important to set environment variables correctly. Open 
the Command Prompt, and run SetEnv.cmd (which explains what switches to set; in 
my case I went for SetEnv.cmd /Release /x64 /vista). Once done, the command 
prompt will turn all green.

With that command prompt (the green one) still open, cd into the folder where 
you cloned darcomage, then cd to build/. Now call CMake:

"\Program Files (x86)\CMake\bin\cmake.exe" -G "NMake Makefiles" -DCMAKE_D_FLAGS="-m64" ..

Here the -G switch sets the output format to be NMake (which we got with the 
Windows SDK and set up with SetEnv.cmd), and the -DCMAKE_D_FLAGS sets the 
compilation to be explicitly 64-bit (because DMD defaults to 32-bit even on 
64-bit OSs at the moment; it might not do that in the future, but there's no 
harm in explicitly setting 64-bit anyway).

This command should then fail, citing that Lua wasn't found. That's true, given 
that there's no default folder for installing libraries and includes on Windows. 
In that case, you have three options. First is to edit the CMakeCache.txt file 
(in the build/ folder) and set the path and library to whatever the path you 
extracted those is (the path must point to the "include" folder, and the library 
must point to the x64 .lib file). Then rerun the same CMake command as above, 
and it should say that it found Lua (but not found SDL, so repeat the same thing 
with it). This is how I built it. The second option is to put all the 
development files in one folder tree with Linux-like names, and then set the 
CMake prefix to it, so the libraries and includes get found automatically. The 
third option is to use CCMake to point to those files. The CMake GUI doesn't 
work, as you need the environment set up, and it only applies to the particular 
Command Prompt window.

Note that for SDL 2 itself, it sets a "temporary path" and also a "SDL2main" 
library. The former is the same include path as for the others, and the latter 
is a path to the SDL2main.lib file.

Once that's done, everything should compile fine, and you'll get a darcomage.exe 
file in build/src/.

To have it launch, you need to put all the DLL files from all the Lua and SDL 
development files you downloaded into the same folder as darcomage.exe. Then 
have the lua and data files somewhere they can be found by the game (as 
explained in the README.MD file).

And that's it, building is complete. To also compile for 32-bit, see 
BUILDING-WIN32.TXT.
